q()
matrix(c(1 2 3 4 5 6 7 8) nrow[4] ncol[2]))
matrix (c(1 2 3 4 5 6 7 8) nrow[4] ncol[2]))
demo()
help()
version
session()
update.packages(ggplot2)
update.packages()
update.packages("ggplot2")
detach()
remove.packages('ggplot2')
version
sessioninfo
sessionInfo()
help(packages="ggplot2")
help (packages="ggplot2")
help (packages = "ggplot2")
help ()
help (devtools)
library(devtools)
check()
aes()
install.packages('devtools')
install.packages("devtools")
install.packages("KenSmooth")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
load("~/GitHub/ProgrammingAssignment2/cachematrix.R")
setwd("~/GitHub/ProgrammingAssignment2")
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
